trigger:
- main
- release

pr: none  # Don't trigger on PRs

pool:
  vmImage: ubuntu-latest

variables:
  - name: extensionVersion
    value: '1.$(Build.BuildNumber)' # 0.yyyyMMdd.rev
  # Publish a private DEV version for testing, if branch != release
  # This is only 'main' for the trigger above but can be manually run for others
  - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/release') }}:
    - group: 'Publish extension DEV'
    - name: vssManifests
      value: |
        vss-extension.json
        vss-extension.dev.json
  # Publish the public version, if branch == release
  - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release') }}:
    - group: 'Publish extension RELEASE'
    - name: vssManifests
      value: |
        vss-extension.json
        vss-extension.release.json

stages:
  - stage: Build_and_package
    jobs:
      - job:
        steps:
        - task: TfxInstaller@4
          inputs:
            version: "0.x"
        - task: Npm@1
          inputs:
            command: ci
          displayName: 'npm clean install'
        - task: Npm@1
          inputs:
            command: custom
            customCommand: 'run build'
          displayName: 'npm run build'
        - task: PackageAzureDevOpsExtension@4
          inputs:
            rootFolder: '$(System.DefaultWorkingDirectory)'
            patternManifest: ${{ variables['vssManifests'] }}
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            extensionName: '$(ExtensionName)'
            extensionVersion: ${{ variables['extensionVersion'] }}
            updateTasksVersion: true
            updateTasksVersionType: 'major'
            extensionVisibility: '$(ExtensionVisibility)'
            extensionPricing: 'free'
            updateTasksId: true
        - task: CopyFiles@2
          inputs:
            Contents: "**/*.vsix"
            TargetFolder: '$(Build.ArtifactStagingDirectory)'
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: '$(ArtifactName)'
            publishLocation: Container
  - stage: Publish_extension
    jobs:
      - job:
        steps:
        - task: TfxInstaller@4
          inputs:
            version: "0.x"
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: "current"
            downloadType: "single"
            artifactName: "$(ArtifactName)"
            downloadPath: "$(System.DefaultWorkingDirectory)"
        - task: PublishAzureDevOpsExtension@4
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: 'MarketplaceServiceConnection'
            fileType: 'vsix'
            vsixFile: '$(ArtifactName)/$(PublisherID).$(ExtensionID)*.vsix'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            extensionName: '$(ExtensionName)'
            updateTasksVersion: false
            extensionVisibility: '$(ExtensionVisibility)'
            shareWith: '$(PublisherID)'
            extensionPricing: 'free'
